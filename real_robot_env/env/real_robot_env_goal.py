
import rospy
import gym
from gym.utils import seeding
#https://bitbucket.org/theconstructcore/theconstruct_msgs/src/master/msg/RLExperimentInfo.msg
from openai_ros.msg import RLExperimentInfo
from moveit_commander import RobotCommander, MoveGroupCommander
from moveit_commander import PlanningSceneInterface, roscpp_initialize, roscpp_shutdown
from geometry_msgs.msg import PoseStamped
from moveit_msgs.msg import Grasp, GripperTranslation, PlaceLocation
from trajectory_msgs.msg import JointTrajectoryPoint


class RealRobotEnv(gym.Env):

    def __init__(self, robot_name_space):

        # To reset Simulations
        print ("Entered Real Env")
              

       
        
        self.seed()

        # Set up ROS related variables
        self.episode_num = 0
        self.reward_pub = rospy.Publisher('/openai/reward', RLExperimentInfo, queue_size=1)

    # Env methods
    def seed(self, seed=None):
        self.np_random, seed = seeding.np_random(seed)
        return [seed]

    def step(self, action):
        """
        Function executed each time step.
        Here we get the action execute it in a time step and retrieve the
        observations generated by that action.
        :param action:
        :return: obs, reward, done, info
        """

        """
        Here we should convert the action num to movement action, execute the action in the
        simulation and get the observations result of performing that action.
        """
        print ("Entered step")
        print ("Do motion: ")
        #self.gazebo.unpauseSim()
        print ("Set action")
        print ("Action:")
        print (action)
        self._set_action(action)
        print ("Get Obs")
        obs = self._get_obs()
        print ("Is done")
        done = self._is_done(obs)
        info = {}
        reward = self._compute_reward(obs, done)
        self._publish_reward_topic(reward, self.episode_num)

        return obs, reward, done, info

    def reset(self):
        rospy.logdebug("Reseting RobotGazeboEnvironment")
        print ("Entered reset")
        self._reset_sim()
        self._init_env_variables()
        self._init_obj_pose()
        self._update_episode()
        obs = self._get_obs()
        return obs
    
    def joints_state_callback(self,msg):
        self.joints_state = msg

    def close(self):
        """
        Function executed when closing the environment.
        Use it for closing GUIS and other systems that need closing.
        :return:
        """
        rospy.logdebug("Closing RobotGazeboEnvironment")
        rospy.signal_shutdown("Closing RobotGazeboEnvironment")

    def _update_episode(self):
        """
        Increases the episode number by one
        :return:
        """
        self.episode_num += 1

    def _publish_reward_topic(self, reward, episode_number=1):
        """
        This function publishes the given reward in the reward topic for
        easy access from ROS infrastructure.
        :param reward:
        :param episode_number:
        :return:
        """
        reward_msg = RLExperimentInfo()
        reward_msg.episode_number = episode_number
        reward_msg.episode_reward = reward
        self.reward_pub.publish(reward_msg)

    # Extension methods
    # ----------------------------

    def _reset_sim(self):
        """Resets a simulation
            resets the real robot arm joints
        
        """
        scene = PlanningSceneInterface()
        robot = RobotCommander()
        aubo_arm = MoveGroupCommander('aubo_arm')
        rospy.sleep(1)
        aubo_arm.set_named_target('resting')
        aubo_arm.go()

        grasps = []
        g = Grasp()
        g.id = 'test'
        grasp_pose = PoseStamped()
        grasp_pose.header.frame_id = 'base_link'
        grasp_pose.pose.position.x = 0
        grasp_pose.pose.position.y = 0
        grasp_pose.pose.position.z = 0
        grasp_pose.pose.orientation.x = 0
        grasp_pose.pose.orientation.y = 0
        grasp_pose.pose.orientation.z = 0
        grasp_pose.pose.orientation.w = 0

        aubo_arm.set_pose_target(grasp_pose)
        aubo_arm.go(wait=True)
        aubo_arm.stop()
        self._check_all_systems_ready()
        return True

    def _check_all_systems_ready(self):
        """
        Checks that all the sensors, publishers and other simulation systems are
        operational.
        """
        raise NotImplementedError()

    def _get_obs(self):
        """Returns the observation.
        """
        raise NotImplementedError()

    def _init_env_variables(self):
        """Inits variables needed to be initialised each time we reset at the start
        of an episode.
        """
        raise NotImplementedError()
   
    def _init_obj_pose(self):
        """Inits object pose for arrangement at reset time
        """
        raise NotImplementedError()

    def _set_init_pose(self):
        """Sets the Robot in its init pose
        """
        raise NotImplementedError()

    def _set_action(self, action):
        """Applies the given action to the simulation.
        """
        raise NotImplementedError()

    def _is_done(self, observations):
        """Indicates whether or not the episode is done ( the robot has fallen for example).
        """
        raise NotImplementedError()

    def _compute_reward(self, observations, done):
        """Calculates the reward to give based on the observations given.
        """
        raise NotImplementedError()

    def _env_setup(self, initial_qpos):
        """Initial configuration of the environment. Can be used to configure initial state
        and extract information from the simulation.
        """
        raise NotImplementedError()
